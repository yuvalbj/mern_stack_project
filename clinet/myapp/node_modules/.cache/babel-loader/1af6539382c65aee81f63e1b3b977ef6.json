{"ast":null,"code":"var _jsxFileName = \"/Users/fundguard/Desktop/Full stack course/HW/Projects/React/clinet/myapp/src/members/AllMembers.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport MemberComp from \"./MemberComp\";\nimport membersBL from './membersUtils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction AllMembersComp(props) {\n  _s();\n\n  const [allMembers, SetAllMembers] = useState([]);\n  const [searchResult, setSearchResult] = useState([]);\n  const [searchPhrase, setSearchPhrase] = useState('');\n  useEffect(() => {\n    async function fetchData() {\n      let result = await membersBL.getAllMembers();\n      SetAllMembers(result.data);\n    }\n\n    fetchData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      children: [\"Search: \", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        onChange: e => setSearchPhrase(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 17\n      }, this), \" \\xA0\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\",\n        value: \"search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this), allMembers.map(mem => {\n      return /*#__PURE__*/_jsxDEV(MemberComp, {\n        memId: mem._id\n      }, mem._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 20\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n}\n\n_s(AllMembersComp, \"O+7zVusD19qyf/2vg7E5TIrqC5c=\");\n\n_c = AllMembersComp;\nexport default AllMembersComp;\n\nvar _c;\n\n$RefreshReg$(_c, \"AllMembersComp\");","map":{"version":3,"sources":["/Users/fundguard/Desktop/Full stack course/HW/Projects/React/clinet/myapp/src/members/AllMembers.js"],"names":["useState","useEffect","MemberComp","membersBL","AllMembersComp","props","allMembers","SetAllMembers","searchResult","setSearchResult","searchPhrase","setSearchPhrase","fetchData","result","getAllMembers","data","e","target","value","map","mem","_id"],"mappings":";;;AAAA,SAASA,QAAT,EAAoBC,SAApB,QAAqC,OAArC;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,SAAP,MAAsB,gBAAtB;;;AAEA,SAASC,cAAT,CAAwBC,KAAxB,EAA8B;AAAA;;AAE5B,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BP,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACQ,YAAD,EAAgBC,eAAhB,IAAmCT,QAAQ,CAAC,EAAD,CAAjD;AACA,QAAM,CAACU,YAAD,EAAeC,eAAf,IAAkCX,QAAQ,CAAC,EAAD,CAAhD;AAEAC,EAAAA,SAAS,CAAE,MAAM;AACf,mBAAeW,SAAf,GAA2B;AAC3B,UAAIC,MAAM,GAAG,MAAMV,SAAS,CAACW,aAAV,EAAnB;AACAP,MAAAA,aAAa,CAACM,MAAM,CAACE,IAAR,CAAb;AACC;;AACDH,IAAAA,SAAS;AACV,GANQ,EAMN,EANM,CAAT;AASA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACE;AAAA,0CACU;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,QAAQ,EAAEI,CAAC,IAAIL,eAAe,CAACK,CAAC,CAACC,MAAF,CAASC,KAAV;AAAjD;AAAA;AAAA;AAAA;AAAA,cADV,wBAEE;AAAO,QAAA,IAAI,EAAC,QAAZ;AAAqB,QAAA,KAAK,EAAC;AAA3B;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAOIZ,UAAU,CAACa,GAAX,CAAeC,GAAG,IAChB;AACE,0BAAO,QAAC,UAAD;AAA0B,QAAA,KAAK,EAAEA,GAAG,CAACC;AAArC,SAAiBD,GAAG,CAACC,GAArB;AAAA;AAAA;AAAA;AAAA,cAAP;AACD,KAHH,CAPJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAgBD;;GA/BQjB,c;;KAAAA,c;AAiCT,eAAeA,cAAf","sourcesContent":["import { useState , useEffect } from \"react\";\nimport MemberComp from \"./MemberComp\";\nimport membersBL from './membersUtils';\n\nfunction AllMembersComp(props){\n\n  const [allMembers, SetAllMembers] = useState([]);\n  const [searchResult , setSearchResult] = useState([]);\n  const [searchPhrase, setSearchPhrase] = useState('');\n\n  useEffect( () => {\n    async function fetchData() {\n    let result = await membersBL.getAllMembers();\n    SetAllMembers(result.data);\n    }\n    fetchData();\n  }, [])\n\n\n  return (\n    <div className=\"App\">\n      <form>\n        Search: <input type=\"text\" onChange={e => setSearchPhrase(e.target.value)} /> &nbsp;\n        <input type=\"submit\" value=\"search\"></input>\n      </form>\n      \n      {\n        allMembers.map(mem => \n          {\n            return <MemberComp key={mem._id} memId={mem._id}></MemberComp>\n          })\n      }\n\n    </div>\n  );\n}\n\nexport default AllMembersComp;\n"]},"metadata":{},"sourceType":"module"}