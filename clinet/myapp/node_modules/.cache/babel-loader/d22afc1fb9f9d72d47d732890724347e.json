{"ast":null,"code":"var _jsxFileName = \"/Users/fundguard/Desktop/Full stack course/HW/Projects/React/mern_stack_project/clinet/myapp/src/members/EditMember.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport membersBL from '../utils/membersUtils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction EditMemberComp(props) {\n  _s();\n\n  const [memID] = useState(props.match.params.id);\n  const [memName, setMemName] = useState('');\n  const [memEmail, setMemEmail] = useState('');\n  const [memCity, setMemCity] = useState('');\n  useEffect(() => {\n    let isMounted = true;\n\n    async function fetchData() {\n      let result = await membersBL.getMember(memID);\n\n      if (isMounted) {\n        setMemName(result.data.name);\n        setMemEmail(result.data.email);\n        setMemCity(result.data.city);\n      }\n    }\n\n    fetchData();\n    return () => {\n      isMounted = false;\n    };\n  }, [memID]);\n\n  const UpdateMov = async (e) => {\n    e.preventDefault();\n    let updatedMem = {\n      name: memName,\n      email: memEmail,\n      city: memCity\n    };\n    let result = await membersBL.updateMem(memID, updatedMem);\n    alert(result.data);\n    props.history.push('/main/subs/all-members');\n  };\n\n  const goBack = () => {\n    props.history.push('/main/subs/all-members');\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"Edit Member \", sessionStorage[\"fullName\"]]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: e => UpdateMov(e),\n      children: [\"Name: \", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: memName,\n        onChange: e => setMemName(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 13\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 95\n      }, this), \"Email: \", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: memEmail,\n        onChange: e => setMemEmail(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 14\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 98\n      }, this), \"City: \", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: memCity,\n        onChange: e => setMemCity(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 13\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 95\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\",\n        value: \"Update\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"button\",\n        value: \"Cancel\",\n        onClick: goBack\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n}\n\n_s(EditMemberComp, \"eiVo5zoUxc1iq489HvnlXUsDF2w=\");\n\n_c = EditMemberComp;\nexport default EditMemberComp;\n\nvar _c;\n\n$RefreshReg$(_c, \"EditMemberComp\");","map":{"version":3,"sources":["/Users/fundguard/Desktop/Full stack course/HW/Projects/React/mern_stack_project/clinet/myapp/src/members/EditMember.js"],"names":["useState","useEffect","membersBL","EditMemberComp","props","memID","match","params","id","memName","setMemName","memEmail","setMemEmail","memCity","setMemCity","isMounted","fetchData","result","getMember","data","name","email","city","UpdateMov","e","preventDefault","updatedMem","updateMem","alert","history","push","goBack","sessionStorage","target","value"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\nimport membersBL from '../utils/membersUtils';\n\n\nfunction EditMemberComp(props) {\n\n  const [memID ] = useState(props.match.params.id)\n  const [memName, setMemName] = useState('');\n  const [memEmail, setMemEmail] = useState('');\n  const [memCity, setMemCity] = useState('');\n\n\n  \n  useEffect(() => {\n    let isMounted = true; \n    async function fetchData() {\n      let result = await membersBL.getMember(memID);\n      if(isMounted){\n        setMemName(result.data.name);\n        setMemEmail(result.data.email);\n        setMemCity(result.data.city);\n      }\n    }\n    fetchData();\n    return  () => { isMounted = false };\n  }, [memID])\n\n  const UpdateMov = async (e) => \n  {\n    e.preventDefault();\n    let updatedMem = {name: memName, email: memEmail, city : memCity};\n    let result = await membersBL.updateMem(memID , updatedMem);\n    alert(result.data);\n    props.history.push('/main/subs/all-members')\n\n  }\n\n  const goBack = () => \n  {\n    props.history.push('/main/subs/all-members')\n\n  }\n  return (\n    <div className=\"App\">\n      <h3>Edit Member {sessionStorage[\"fullName\"]}</h3>\n    \n    <form onSubmit={e => UpdateMov(e)}>\n      Name: <input type=\"text\" value={memName} onChange={ e => setMemName(e.target.value)} /> <br/>\n      Email: <input type=\"text\" value={memEmail} onChange={ e => setMemEmail(e.target.value)} /> <br/>\n      City: <input type=\"text\" value={memCity} onChange={ e => setMemCity(e.target.value)} /> <br/>\n      <input type=\"submit\" value=\"Update\" />\n      <input type=\"button\" value=\"Cancel\" onClick={goBack} />\n    </form>\n    </div>\n  );\n}\n\nexport default EditMemberComp;\n"]},"metadata":{},"sourceType":"module"}